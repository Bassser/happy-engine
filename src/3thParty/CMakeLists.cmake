include (${HappyEngine_SOURCE_DIR}/cmakeHelpers/LibFindPackage.cmake)

if (WIN32)
    add_definitions(-DHE_WINDOWS)
elseif (APPLE)
    add_definitions(-DHE_MAC)
else()
    add_definitions(-DHE_LINUX)
endif()

macro (IncludeThirdPartyOSX)


include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/assimp/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/awesomium/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/boost/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/cairo/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/devIL/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/freeType/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/glew/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/libsndfile/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/openAl/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/physx/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/raknet/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/SFML/include)

add_definitions( -DGLEW_STATIC -DSFML_STATIC -DGLEW_MX -DLLVM )

endmacro()

macro (IncludeThirdParty)


include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/Assimp/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/Awesomium/include)
if (MSVC11)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/Boost-msvc11/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/PhysX-msvc11/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/RakNet-msvc11/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/SFML2.0-msvc11/include)
else()
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/Boost/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/PhysX/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/RakNet/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/SFML2.0/include)
endif()
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/Cairo/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/DevIL/include/${PLATFORM}${BITNESS})
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/FreeType/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/FreeType/include/freetype2)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/fontconfig/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/glew/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/libsndfile/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/LibOVR/include)
include_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/OpenAl/include)

add_definitions( -DGLEW_STATIC -DSFML_STATIC -DGLEW_MX -D_SCL_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS )
if (${BITNESS} EQUAL 64)
	add_definitions(-DARCH_64)
else()
	add_definitions(-DARCH_32)
endif()

link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/Assimp/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/Awesomium/lib/${PLATFORM}${BITNESS})
if (MSVC11)
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/Boost-msvc11/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/PhysX-msvc11/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/RakNet-msvc11/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/SFML2.0-msvc11/lib/${PLATFORM}${BITNESS})
else()
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/Boost/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/PhysX/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/RakNet/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/SFML2.0/lib/${PLATFORM}${BITNESS})
endif()
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/Cairo/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/DevIL/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/FreeType/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/fontconfig/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/glew/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/libsndfile/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/LibOVR/lib/${PLATFORM}${BITNESS})
link_directories(${HappyEngine_SOURCE_DIR}/3thParty/lib/OpenAl/lib/${PLATFORM}${BITNESS})
endmacro()



macro (LinkThirdPartyOSX target)
target_link_libraries($(target) ${Boost_LIBRARIES})
endmacro()

macro (LinkThirdParty target)
target_link_libraries(${target} assimp)
target_link_libraries(${target} awesomium)

if (MSVC11)
target_link_libraries(${target} debug libboost_chrono-vc110-mt-gd-1_53)
target_link_libraries(${target} debug libboost_date_time-vc110-mt-gd-1_53)
target_link_libraries(${target} debug libboost_regex-vc110-mt-gd-1_53)
target_link_libraries(${target} debug libboost_system-vc110-mt-gd-1_53)
target_link_libraries(${target} debug libboost_thread-vc110-mt-gd-1_53)
target_link_libraries(${target} debug libboost_filesystem-vc110-mt-gd-1_53)

target_link_libraries(${target} optimized libboost_chrono-vc110-mt-1_53)
target_link_libraries(${target} optimized libboost_date_time-vc110-mt-1_53)
target_link_libraries(${target} optimized libboost_regex-vc110-mt-1_53)
target_link_libraries(${target} optimized libboost_system-vc110-mt-1_53)
target_link_libraries(${target} optimized libboost_thread-vc110-mt-1_53)
target_link_libraries(${target} optimized libboost_filesystem-vc110-mt-1_53)
else()
target_link_libraries(${target} debug libboost_chrono-vc100-mt-gd-1_49)
target_link_libraries(${target} debug libboost_date_time-vc100-mt-gd-1_49)
target_link_libraries(${target} debug libboost_regex-vc100-mt-gd-1_49)
target_link_libraries(${target} debug libboost_system-vc100-mt-gd-1_49)
target_link_libraries(${target} debug libboost_thread-vc100-mt-gd-1_49)
target_link_libraries(${target} debug libboost_filesystem-vc100-mt-gd-1_49)
target_link_libraries(${target} debug libboost_signals-vc100-mt-gd-1_49)

target_link_libraries(${target} optimized libboost_chrono-vc100-mt-1_49)
target_link_libraries(${target} optimized libboost_date_time-vc100-mt-1_49)
target_link_libraries(${target} optimized libboost_regex-vc100-mt-1_49)
target_link_libraries(${target} optimized libboost_system-vc100-mt-1_49)
target_link_libraries(${target} optimized libboost_thread-vc100-mt-1_49)
target_link_libraries(${target} optimized libboost_filesystem-vc100-mt-1_49)
target_link_libraries(${target} optimized libboost_signals-vc100-mt-1_49)
endif()

target_link_libraries(${target} DevIL)
target_link_libraries(${target} ILU)

target_link_libraries(${target} freetype)

target_link_libraries(${target} glew32mxs)
target_link_libraries(${target} libsndfile-1)
target_link_libraries(${target} OpenAL32)
target_link_libraries(${target} cairo)

target_link_libraries(${target} debug libovrd)
target_link_libraries(${target} optimized libovr)

if (${BITNESS} EQUAL 32)
    set (arch x86)
else()
    set (arch x64)
endif()

target_link_libraries(${target} debug PhysX3CharacterKinematicCHECKED_${arch})
target_link_libraries(${target} debug PhysX3CHECKED_${arch})
target_link_libraries(${target} debug PhysX3CommonCHECKED_${arch})
target_link_libraries(${target} debug PhysX3CookingCHECKED_${arch})
target_link_libraries(${target} debug PhysX3ExtensionsCHECKED)
target_link_libraries(${target} debug PhysX3VehicleCHECKED)
target_link_libraries(${target} debug PhysXProfileSDKCHECKED)
target_link_libraries(${target} debug PhysXVisualDebuggerSDKCHECKED)
target_link_libraries(${target} debug PxTaskCHECKED)
target_link_libraries(${target} debug RepX3CHECKED)
target_link_libraries(${target} debug RepXUpgrader3CHECKED) 

target_link_libraries(${target} optimized PhysX3CharacterKinematic_${arch})
target_link_libraries(${target} optimized PhysX3_${arch})
target_link_libraries(${target} optimized PhysX3Common_${arch})
target_link_libraries(${target} optimized PhysX3Cooking_${arch})
target_link_libraries(${target} optimized PhysX3Extensions)
target_link_libraries(${target} optimized PhysX3Vehicle)
target_link_libraries(${target} optimized PhysXProfileSDK)
target_link_libraries(${target} optimized PhysXVisualDebuggerSDK)
target_link_libraries(${target} optimized PxTask)
target_link_libraries(${target} optimized RepX3)
target_link_libraries(${target} optimized RepXUpgrader3)

target_link_libraries(${target} debug RakNetStatic-d)
target_link_libraries(${target} optimized RakNetStatic-r)
target_link_libraries(${target} ws2_32)

target_link_libraries(${target} debug sfml-graphics-s-d)
target_link_libraries(${target} debug sfml-main-d)
target_link_libraries(${target} debug sfml-system-s-d)
target_link_libraries(${target} debug sfml-window-s-d)
target_link_libraries(${target} optimized sfml-graphics-s)
target_link_libraries(${target} optimized sfml-main)
target_link_libraries(${target} optimized sfml-system-s)
target_link_libraries(${target} optimized sfml-window-s)
endmacro()

macro (CopyThirdParty target)
file(INSTALL ${HappyEngine_SOURCE_DIR}/3thParty/dll/Debug/${PLATFORM}${BITNESS}/ DESTINATION ${target}/Debug FILES_MATCHING REGEX .*)
file(INSTALL ${HappyEngine_SOURCE_DIR}/3thParty/dll/Release/${PLATFORM}${BITNESS}/ DESTINATION ${target}/MinSizeRel FILES_MATCHING REGEX .*)
file(INSTALL ${HappyEngine_SOURCE_DIR}/3thParty/dll/Release/${PLATFORM}${BITNESS}/ DESTINATION ${target}/Release FILES_MATCHING REGEX .*)
file(INSTALL ${HappyEngine_SOURCE_DIR}/3thParty/dll/Release/${PLATFORM}${BITNESS}/ DESTINATION ${target}/RelWithDebInfo FILES_MATCHING REGEX .*)
endmacro()
